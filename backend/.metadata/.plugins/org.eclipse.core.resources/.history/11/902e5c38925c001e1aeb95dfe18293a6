package app.todo.jwt;

import java.io.IOException;



import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Service;
import org.springframework.web.filter.OncePerRequestFilter;

import app.todo.SpringSecurity.UserDetailsImpl;
import io.jsonwebtoken.ExpiredJwtException;
@Service
public class JwtRequestFilter extends OncePerRequestFilter {
	
	 	@Autowired
	    private UserDetailsImpl jwtUserDetailsService;

	    @Autowired
	    private jwtUtil jwtTokenUtil;

	    @Override
	    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	            throws ServletException, IOException {
	    	   
	    
		    String username = null;
		    String jwtToken = null;
	    	Cookie[] cookies = request.getCookies();
	
	        if (cookies != null ) {
	        	  for (Cookie cookie : cookies) {
	                   if ("Token".equals(cookie.getName())) {
	                       jwtToken = cookie.getValue();
	                       break;
	                   }
	               }
	        	  System.out.println(jwtToken);
	            try {
	                username = jwtTokenUtil.getUsernameFromToken(jwtToken);
	            } catch (IllegalArgumentException e) {
	                logger.error("Unable to get JWT Token");
	            } catch (ExpiredJwtException e) {
	                logger.error("JWT Token has expired");
	            }
	        } else {
	            logger.warn("JWT Token NOT FOUND");
	        }

	        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
	            UserDetails userDetails = jwtUserDetailsService.loadUserByUsername(username);
	            if (jwtTokenUtil.validateToken(jwtToken, userDetails)) {
	                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
	                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
	                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
	                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
	            }
	        }
	        filterChain.doFilter(request, response);
	    }

		
	}
