package app.todo.SpringSecurity;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import app.todo.jwt.JwtEntryPoint;
import app.todo.jwt.JwtRequestFilter;


@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	JwtEntryPoint jwtEntryPoint;
	
	@Autowired
	JwtRequestFilter JwtRequestFilter;
	
	@Autowired
	UserDetailsImpl userdetailsservice;
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public AuthenticationManager authenticationManager() throws Exception {
		return super.authenticationManager();
	}
	
	@Bean
	public DaoAuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider auth=new DaoAuthenticationProvider();
		try {
			auth.setPasswordEncoder(passwordEncoder());
			auth.setUserDetailsService(userDetailsService());
		}catch (Exception e) {
				System.out.println(e);
		}
		return auth;
	}
	
	@Override
	public void configure(AuthenticationManagerBuilder auth) {
		try {
			auth.userDetailsService(userdetailsservice).passwordEncoder(passwordEncoder());
		}catch (Exception e) {
			System.out.println(e);
		}
	}
	
	@Override
	public void configure(HttpSecurity http) {
		try {
			    http.cors().and().csrf().disable()
				.authorizeRequests()
				.antMatchers("/Auth/**").permitAll()
				.antMatchers("/Todo/**").authenticated()
				.anyRequest().authenticated().and()
			    .exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint).and().sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		 	    // Add a filter to validate the tokens with every request
				http.addFilterBefore(JwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
		}catch (Exception e) {
			System.out.println(e);
		}
	}
	
	
}
